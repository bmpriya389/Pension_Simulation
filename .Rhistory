shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(BayesBridge)
rm(list=ls())
source("functions.R")
###################### Load winklevoss and mortality tables #################################
load('E://SUNYALBANY/Pension_Simulation_Project/Code/Data/winklevossdata.RData')
load('E://SUNYALBANY/Pension_Simulation_Project/Code/Data/Mortality.RData')
######################### Parameters constant but likely to change ##########################
ea<-30
a_sgr<-0.05
sal=60000
sgr<-0.0568
mort<-2
afc<-5
bf<-0.02
i<-0.08
cola<-0.01
amortization<-30
vesting<-5
cm<-'EAN'
median_p<-0.854
median_dr<-0.08
median_sgr<-0.0568
pop<-rep(1,71)
afc<-5
retire<-65
get_qxt(ea,retire)
pop_type='Uniform'
pop_size=100000
ca=37
median=45
inflation=2
pop<-rep(1,71)
active<-seq(30,65)
pgr<-sgr-inflation
retirees<-seq(66,100)
ea<-30
percent<-percent(median_p)
total_aal<-sum(pop*get_AAL(ea,retire,i,a_sgr,sgr,cola,afc,bf,cm,mort,vesting))
total_nc<-sum(get_NC(ea,retire,i,a_sgr,sgr,cola,afc,bf,cm,mort,vesting)*pop[1:length(age)])
total_assets<-sum(pop*get_median_asset(ea,retire,median_p,median_dr,median_sgr,a_sgr,cola,afc,bf,cm,mort,vesting))
total_uaal<-total_aal-total_assets
total_adc<-sum(get_ARC(pop,ea,retire,median_p,median_dr,median_sgr,i,a_sgr,sgr,pgr,cola,afc,bf,cm,mort,vesting,amortization))
payroll<-sum(get_act_sal(ea,retire,a_sgr)*pop[1:length(age)])
nc_pay<-percent(total_nc/payroll)
uaal_pay<percent(total_uaal/payroll)
arc_pay<-percent(total_ARC/payroll)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
installed.packages()
install.packages()
install.packages("shinybootstrap2")
shiny::runApp()
install.packages(“scales”)
install.packages(scales)
install.packages("scales")
install.packages("scales")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
#Importing libraries
library(foreach)
library(xlsx)
library(doParallel)
#Clear all objects
rm(list=ls())
#set program to use 4 cores
#cl<-makeCluster(3)
#registerDoParallel(cl)
# Load R file for functions
source("functions.R")
# Cost method vector
c_m<-c('EAN','PUC')
#entry age vector
e_a<-c(25,30,35)
#retirement age vector
r_a<-seq(55,65,5)
#salary growth ratevector
act_sgr<-sgr<-seq(0.03,0.06,0.01)
#discount rate vector
i_r<-seq(0.03,0.09,0.01)
#current age vector
ca<-seq(25,85,10)
#Mortality table numbers
mort_num<-c(2,4,6)
#starting salary
sal<-1
#Benefit factor vector
bf_p<-seq(0.02,0.06,0.01)
#afc vector
afc_p<-c(1,5,10)
#cola vector
cola_r<-seq(0,0.04,0.01)
#inflation rate
inflation<-0.02
#vesting period
vesting<-5
#run number
run<-0
#funding level
median_p<-0.854
#amortization period
amortization<-30
val<-0
#Max age limit of the model
max_age<-100
dat_sample<-NULL
mort_name <- function(mort_number){
m<-switch(mort_number,'2'="RP2014_Employee_total",'4'="RP2000_Employee_total",'6'="RP2010_Employee_total")
return(m)
}
iter_number=10
print(paste0("Start Time ",Sys.Date()," ",Sys.time()))
#foreach(icount(iter_number)) %dopar% {
for(i in seq(1,100)){
a1<-sample(e_a,1)
l1<-sample(subset(ca,ca>a1),1)
k1<-sample(r_a,1)
b1<-sample(i_r,1)
c1<-sample(act_sgr,1)
e1<-sample(cola_r,1)
f1<-sample(afc_p,1)
g1<-sample(bf_p,1)
h1<-sample(c_m,1)
j1<-sample(mort_num,1)
#print(paste0("ea",a1," ca",l1," ra",k1))
nc<-c(get_NC(a1,k1,b1,c1,c1,e1,f1,g1,h1,j1,vesting),rep(0,(max_age-retire)))[l1-a1+1]
act_sal<-c(get_act_sal(a1,k1,c1),rep(0,(max_age-retire)))[l1-a1+1]
aal<-get_AAL(a1,k1,b1,c1,c1,e1,f1,g1,h1,j1,vesting)[l1-a1+1]
adc<-get_ARC(rep(1,(100-a1)+1),a1,k1,median_p,b1,c1,b1,c1,c1,c1-inflation,e1,f1,g1,h1,j1,vesting,amortization)[l1-a1+1]
rpvfbx<-get_rPVFBx_after_r(a1,k1,b1,c1,c1,e1,f1,g1,j1)[2]
ret_annuity<-get_retirement_annuity(a1,k1,c1,c1,f1,g1)
repl_rate<-get_replacement_rate(a1,k1,c1,c1,f1,g1)
dat_sample<-rbind(dat_sample,data.frame(run,nc,act_sal,aal,adc,rpvfbx,ret_annuity,repl_rate,
a1,k1,l1,median_p,b1,c1,inflation,c1-inflation,e1,f1,
g1,h1,mort_name(as.character(j1)),vesting,amortization))
run=run+1
}
#}
print(paste0("END Time ",Sys.Date()," ",Sys.time()))
names(dat_sample)<-c('Run No.','Current Normal Cost','Current Salary','Current AAL','Current ARC','Expected value of annuity','Retirement Annuity','Replacement Rate',
'Entry Age','Retirement Age','Current Age','Funding Level(%)','Discount Rate(%)','Salary growth rate(%)','Inflation Rate(%)','Payroll Growth Rate(%)',
'COLA (%)','AFC','Benefit Factor(%)','Cost Method','Mortality Table','Vesting Period','Amortization Period')
save(dat_sample,file='Simulate_sample.RData')
write.xlsx(dat_sample,file='Simulate_sample2.xls')
View(dat_sample)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(BayesBridge)
rm(list=ls())
source("functions.R")
###################### Load winklevoss and mortality tables #################################
load('E://SUNYALBANY/Pension_Simulation_Project/Code/Data/winklevossdata.RData')
load('E://SUNYALBANY/Pension_Simulation_Project/Code/Data/Mortality.RData')
######################### Parameters constant but likely to change ##########################
ea<-30
a_sgr<-0.05
sal=60000
sgr<-0.0568
mort<-2
afc<-5
bf<-0.02
i<-0.08
cola<-0.01
amortization<-30
vesting<-5
cm<-'EAN'
median_p<-0.854
median_dr<-0.08
median_sgr<-0.0568
pop<-rep(1,71)
afc<-5
retire<-65
get_qxt(ea,retire)
pop_type='Uniform'
pop_size=100000
ca=37
median=45
inflation=2
pop<-rep(1,71)
active<-seq(30,65)
pgr<-0.0368
retirees<-seq(66,100)
ea<-30
get_a_after_r(ea,retire,i,cola,mort)
get_ar(ea,retire,i,cola,mort)
get_vxr(ea,retire,i)[(length(get_vrx(ea,retire,i))):length(get_vxr(ea,retire,i))] *
c(get_rpmx(ea,retire,mort)[length(get_rpmx(ea,retire,mort))],na.omit(get_xpmr(ea,retire,mort))) *
((1 + cola) ^ yos_r_max)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(BayesBridge)
rm(list=ls())
source("functions.R")
###################### Load winklevoss and mortality tables #################################
load('E://SUNYALBANY/Pension_Simulation_Project/Code/Data/winklevossdata.RData')
load('E://SUNYALBANY/Pension_Simulation_Project/Code/Data/Mortality.RData')
######################### Parameters constant but likely to change ##########################
ea<-30
a_sgr<-0.05
sal=60000
sgr<-0.0568
mort<-2
afc<-5
bf<-0.02
i<-0.08
cola<-0.01
amortization<-30
vesting<-5
cm<-'EAN'
median_p<-0.854
median_dr<-0.08
median_sgr<-0.0568
pop<-rep(1,71)
afc<-5
retire<-65
get_qxt(ea,retire)
pop_type='Uniform'
pop_size=100000
ca=37
median=45
inflation=2
pop<-rep(1,71)
active<-seq(30,65)
pgr<-0.0368
retirees<-seq(66,100)
ea<-30
rPVFBx <- get_rPVFBx(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort)
rPVFBx
pvtc <- get_PVTC_t(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort,vesting)
pvtc
k <- (c(rPVFBx,rep(0,length(pvtc)-length(rPVFBx))) + pvtc)
k
c(rPVFBx,rep(0,length(pvtc)-length(rPVFBx)))
k <- rPVFBx + pvtc
k
age_information(ea,retire)
rPVFBx <- get_rPVFBx(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort)
pvtc <- get_PVTC_t(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort,vesting)
exp_sal <- get_exp_sal(ea,retire,sgr)
k <-(rPVFBx[1] + pvtc[1]) / (exp_sal[1] * get_tla_t(ea,retire,i,sgr,mort)[1])
k
rPVFBx
rep(0,length(pvtc)-length(rPVFBx))
(rPVFBx+ pvtc)
((rPVFBx[1] + pvtc[1]) / (exp_sal[1] * get_tla_t(ea,retire,i,sgr,mort)[1])) * exp_sal
k*c(get_tla_t(ea,retire,i,sgr,mort),get_tla(ea,retire,i,sgr,mort,age[length(age)]))* exp_sal/exp_sal[1]
rPVFBx[1] + pvtc[1]
k[1]
(rPVFBx[1] + pvtc[1]
)
k
k <-(rPVFBx + pvtc)
k
(rPVFBx[1] + pvtc[1]
)
k[1]
nc <- k[1] / (exp_sal[1] * get_tla_t(ea,retire,i,sgr,mort)[1]) * exp_sal
nc
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
}
runApp()
runApp()
runApp()
age[length(age)]
age[1]
rPVFBx+ pvtc
#########################################################################################################
#########################################################################################################
#                                                                                                       #
#                                          DESCRIPTION                                                  #
#   functions.R contains the logic for the entire model.                                                #
#                                                                                                       #
#   The server makes function calls to functions.R whenever there is a change in user input             #
#                                                                                                       #
#########################################################################################################
#########################################################################################################
rm(list=ls())
source("functions.R")
ea<-30
a_sgr<-0.05
sal=60000
sgr<-0.0568
mort<-2
afc<-5
bf<-0.02
i<-0.08
cola<-0.01
amortization<-30
vesting<-5
cm<-'EAN'
median_p<-0.854
median_dr<-0.08
median_sgr<-0.0568
pop<-rep(1,71)
afc<-5
retire<-65
get_NC(ea,retire,i,a_sgr,sgr,cola,afc,bf,cm,mort,vesting)
get_NC(ea,retire,i,a_sgr,sgr,cola,afc,bf,'PUC',mort,vesting)
get_rPVFBx(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort)
age_information(ea,retire)
rPVFBx <- get_rPVFBx(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort)
pvtc <- get_PVTC_t(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort,vesting)
exp_sal <- get_exp_sal(ea,retire,sgr)
# k is common factor in the NC calculations for both cost moethods
k <-(rPVFBx[1] + pvtc[1]) / (exp_sal[1] * get_tla_t(ea,retire,i,sgr,mort)[1])
k
if (cm == 'EAN'){
# NC formula simulation excel sheet uses PVTC,rPVFBx at entry age
nc <- (k) * exp_sal
}
else{
# Normal cost for PUC = (rPVFBx + pvtc) /  years to retirement
nc <- (rPVFBx+ pvtc) / (age[length(age)] - age[1])
}
nc
nc <- (rPVFBx+ pvtc) / (age[length(age)] - age[1])
nc
nc <- (rPVFBx+ pvtc) / (age[length(age)] - age[1])
nc
age_information(ea,retire)
rPVFBx <- get_rPVFBx(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort)
pvtc <- get_PVTC_t(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort,vesting)
exp_sal <- get_exp_sal(ea,retire,sgr)
# k is common factor in the NC calculations for both cost moethods
k <-(rPVFBx[1] + pvtc[1]) / (exp_sal[1] * get_tla_t(ea,retire,i,sgr,mort)[1])
# conditional check and normal cost calculation for different cost methods
cm='PUC'
if (cm == 'EAN'){
# NC formula simulation excel sheet uses PVTC,rPVFBx at entry age
nc <- (k) * exp_sal
}
else{
# Normal cost for PUC = (rPVFBx + pvtc) /  years to retirement
nc <- (rPVFBx+ pvtc) / (age[length(age)] - age[1])
}
nc
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
#########################################################################################################
#########################################################################################################
#                                                                                                       #
#                                          DESCRIPTION                                                  #
#   This file allows you to enter Values for desired inputs and check vectors and values for            #
#   all functions in functions.R                                                                        #
#                                                                                                       #
#########################################################################################################
#########################################################################################################
############################# R COMMAND ##################################
# rm() removes a variable from the workspace. A list of all the variables
# in the workspace is passed as a parameter to rm to clear all variables
# in the workspace to ensure that the model uses only the updated values
# sent by the user for computations
##########################################################################
rm(list=ls())
############################# R COMMAND ##################################
# source() notifies R that the variables and functions present in the
# file passed as an argument to it should be loaded to the r environment
# and is avaiable for use in this file
##########################################################################
# we source our model logic present in functions.R
source("functions.R")
# Enter value for entry age. Model's range for entry age is between 25-45
ea<-30
# Enter value for retirement age. Model's range for entry age is between 55-65
retire<-65
# Enter value for current age.
ca<-65
# Enter value for actual salary growth rate.
a_sgr<-0.05
# Enter expected salary growth rate. Our model can function with different actual and expected salary growth rates.
# We have set the modelto have same actual and expected salary growth rates
sgr<-0.0568
# Enter salary at entry age
sal<-60000
# Enter mortality table code. Codes: 2- RP2014 Total, 4- RP2000 Total, 6-RP2010 Total
mort<-2
# Enter AFC period
afc<-5
# Enter benefit factor
bf<-0.02
# Enter inflation rate. Model is set to constant inflation of 2%
inflation<-0.02
# Enter discoount rate
i<-0.08
# Enter payroll growth rate
pgr<-0.0368
# Enter COLA
cola<-0.01
# Enter amortization period
amortization<-30
# Enter vesting period
vesting<-5
# Enter cost method
cm<-'EAN'
# Enter funding level
median_p<-0.854
# Enter discount rate for calculating assets. Models sets this to the discount rate mentioned earlier
median_dr<-0.08
# Enter salary growth rate for calculating assets. Models sets this to the salary growth rate mentioned earlier
median_sgr<-0.0568
# creating an uniform population
pop<-rep(1,71)
# Set population type
pop_type<-'Uniform'
# Set Population size
pop_size<-100000
# set median age
median<-45
# generate active members population Uniform distribution
active<-seq(30,65)
# generate retirees population Uniform distribution
retirees<-seq(66,100)
get_ARC(pop,ea,retire,median_p,median_dr,median_sgr,i,a_sgr,sgr,pgr,cola,afc,bf,cm,mort,vesting,amortization)
get_FR(pop,ea,retire,median_p,median_dr,median_sgr,i,a_sgr,sgr,cola,afc,bf,cm,mort,vesting)
get_median_asset(ea,retire,median_p,median_dr,median_sgr,a_sgr,cola,afc,bf,cm,mort,vesting)
get_nc_pop(pop,ea,retire,i,a_sgr,sgr,cola,afc,bf,cm,mort,vesting)
get_NC(ea,retire,i,a_sgr,sgr,cola,afc,bf,cm,mort,vesting)
get_stat(ea,retire,active,retirees,i,a_sgr,sgr,cola,afc,bf,cm,mort,vesting)
get_aal_pop(pop,ea,retire,i,a_sgr,sgr,cola,afc,bf,cm,mort,vesting)
get_AAL(ea,retire,i,a_sgr,sgr,cola,afc,bf,cm,mort,vesting)
get_PVTC_t(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort,vesting)
get_PVTC_t(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort,vesting)
get_PVTC(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort,vesting,a)
get_PVTC(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort,vesting,ca)
get_PVTC_t(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort,vesting)
get_term_cost(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort,vesting)
get_xPVFBr(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort)
get_rPVFBx(ea,retire,i,a_sgr,sgr,cola,afc,bf,mort)
get_sal_ca(ea,retire,ca,sal,inflation,sgr)
get_sal_vector_ea(ea,retire,sal,inflation,sgr)
get_exp_sal_r(ea,retire,a_sgr,sgr)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='priyashinydemo', token='F3EB9D1429043C7120ACB1BB1F2E1771', secret='otocYA0lAnRP6GZoDvC6wuZRcChkSOVucbHnsngY')
library(rsconnect)
rsconnect::deployApp('E:/SUNYALBANY/Pension_Simulation_Project/Code/simulation_shiny2_before_65_with_comments')
install.packages(c("xlsx", "xlsxjars"))
rsconnect::deployApp('E:/SUNYALBANY/Pension_Simulation_Project/Code/simulation_shiny2_before_65_with_comments')
rsconnect::deployApp('E:/SUNYALBANY/Pension_Simulation_Project/Code/simulation_shiny2_before_65_with_comments')
rsconnect::deployApp('E:/SUNYALBANY/Pension_Simulation_Project/Code/simulation_shiny2_before_65_with_comments')
rsconnect::deployApp('E:/SUNYALBANY/Pension_Simulation_Project/Code/simulation_shiny2_before_65_with_comments')
rsconnect::deployApp('E:/SUNYALBANY/Pension_Simulation_Project/Code/simulation_shiny2_before_65_with_comments')
library(rsconnect)
rsconnect::deployApp('E:/SUNYALBANY/Pension_Simulation_Project/Code/simulation_shiny2_before_65_with_comments')
rsconnect::deployApp('E:/SUNYALBANY/Pension_Simulation_Project/Code/simulation_shiny2_before_65_with_comments')
rsconnect::deployApp('E:/SUNYALBANY/Pension_Simulation_Project/Code/simulation_shiny2_before_65_with_comments')
rsconnect::deployApp("E:/SUNYALBANY/Pension_Simulation_Project/Code/simulation_shiny2_before_65_with_comments")
library(rsconnect)
rsconnect::deployApp("E:/SUNYALBANY/Pension_Simulation_Project/Code/simulation_shiny2_before_65_with_comments")
rsconnect::deployApp()
shinyapps::systemLocale()
install.packages("devtools")
shinyapps::systemLocale()
install.packages("shinyapps")
